// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lock_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kahuna.Replication.Protos {

  /// <summary>Holder for reflection information generated from lock_message.proto</summary>
  public static partial class LockMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for lock_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LockMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJsb2NrX21lc3NhZ2UucHJvdG8SGUthaHVuYS5SZXBsaWNhdGlvbi5Qcm90",
            "b3MizgEKC0xvY2tNZXNzYWdlEgwKBHR5cGUYASABKAUSEAoIcmVzb3VyY2UY",
            "AiABKAkSEgoFb3duZXIYAyABKAlIAIgBARIUCgxmZW5jaW5nVG9rZW4YBCAB",
            "KAMSFQoNZXhwaXJlTG9naWNhbBgFIAEoAxIVCg1leHBpcmVDb3VudGVyGAYg",
            "ASgNEhMKC3RpbWVMb2dpY2FsGAcgASgDEhMKC3RpbWVDb3VudGVyGAggASgN",
            "EhMKC2NvbnNpc3RlbmN5GAkgASgFQggKBl9vd25lcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kahuna.Replication.Protos.LockMessage), global::Kahuna.Replication.Protos.LockMessage.Parser, new[]{ "Type", "Resource", "Owner", "FencingToken", "ExpireLogical", "ExpireCounter", "TimeLogical", "TimeCounter", "Consistency" }, new[]{ "Owner" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LockMessage : pb::IMessage<LockMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LockMessage> _parser = new pb::MessageParser<LockMessage>(() => new LockMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LockMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kahuna.Replication.Protos.LockMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LockMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LockMessage(LockMessage other) : this() {
      type_ = other.type_;
      resource_ = other.resource_;
      owner_ = other.owner_;
      fencingToken_ = other.fencingToken_;
      expireLogical_ = other.expireLogical_;
      expireCounter_ = other.expireCounter_;
      timeLogical_ = other.timeLogical_;
      timeCounter_ = other.timeCounter_;
      consistency_ = other.consistency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LockMessage Clone() {
      return new LockMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private string resource_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private readonly static string OwnerDefaultValue = "";

    private string owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Owner {
      get { return owner_ ?? OwnerDefaultValue; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwner() {
      owner_ = null;
    }

    /// <summary>Field number for the "fencingToken" field.</summary>
    public const int FencingTokenFieldNumber = 4;
    private long fencingToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FencingToken {
      get { return fencingToken_; }
      set {
        fencingToken_ = value;
      }
    }

    /// <summary>Field number for the "expireLogical" field.</summary>
    public const int ExpireLogicalFieldNumber = 5;
    private long expireLogical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireLogical {
      get { return expireLogical_; }
      set {
        expireLogical_ = value;
      }
    }

    /// <summary>Field number for the "expireCounter" field.</summary>
    public const int ExpireCounterFieldNumber = 6;
    private uint expireCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExpireCounter {
      get { return expireCounter_; }
      set {
        expireCounter_ = value;
      }
    }

    /// <summary>Field number for the "timeLogical" field.</summary>
    public const int TimeLogicalFieldNumber = 7;
    private long timeLogical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimeLogical {
      get { return timeLogical_; }
      set {
        timeLogical_ = value;
      }
    }

    /// <summary>Field number for the "timeCounter" field.</summary>
    public const int TimeCounterFieldNumber = 8;
    private uint timeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TimeCounter {
      get { return timeCounter_; }
      set {
        timeCounter_ = value;
      }
    }

    /// <summary>Field number for the "consistency" field.</summary>
    public const int ConsistencyFieldNumber = 9;
    private int consistency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Consistency {
      get { return consistency_; }
      set {
        consistency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LockMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LockMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Resource != other.Resource) return false;
      if (Owner != other.Owner) return false;
      if (FencingToken != other.FencingToken) return false;
      if (ExpireLogical != other.ExpireLogical) return false;
      if (ExpireCounter != other.ExpireCounter) return false;
      if (TimeLogical != other.TimeLogical) return false;
      if (TimeCounter != other.TimeCounter) return false;
      if (Consistency != other.Consistency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (FencingToken != 0L) hash ^= FencingToken.GetHashCode();
      if (ExpireLogical != 0L) hash ^= ExpireLogical.GetHashCode();
      if (ExpireCounter != 0) hash ^= ExpireCounter.GetHashCode();
      if (TimeLogical != 0L) hash ^= TimeLogical.GetHashCode();
      if (TimeCounter != 0) hash ^= TimeCounter.GetHashCode();
      if (Consistency != 0) hash ^= Consistency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resource);
      }
      if (HasOwner) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (FencingToken != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FencingToken);
      }
      if (ExpireLogical != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireLogical);
      }
      if (ExpireCounter != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpireCounter);
      }
      if (TimeLogical != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TimeLogical);
      }
      if (TimeCounter != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeCounter);
      }
      if (Consistency != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Consistency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resource);
      }
      if (HasOwner) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (FencingToken != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FencingToken);
      }
      if (ExpireLogical != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireLogical);
      }
      if (ExpireCounter != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpireCounter);
      }
      if (TimeLogical != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TimeLogical);
      }
      if (TimeCounter != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeCounter);
      }
      if (Consistency != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Consistency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (HasOwner) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (FencingToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FencingToken);
      }
      if (ExpireLogical != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireLogical);
      }
      if (ExpireCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireCounter);
      }
      if (TimeLogical != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLogical);
      }
      if (TimeCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeCounter);
      }
      if (Consistency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Consistency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LockMessage other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      if (other.FencingToken != 0L) {
        FencingToken = other.FencingToken;
      }
      if (other.ExpireLogical != 0L) {
        ExpireLogical = other.ExpireLogical;
      }
      if (other.ExpireCounter != 0) {
        ExpireCounter = other.ExpireCounter;
      }
      if (other.TimeLogical != 0L) {
        TimeLogical = other.TimeLogical;
      }
      if (other.TimeCounter != 0) {
        TimeCounter = other.TimeCounter;
      }
      if (other.Consistency != 0) {
        Consistency = other.Consistency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Resource = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 32: {
            FencingToken = input.ReadInt64();
            break;
          }
          case 40: {
            ExpireLogical = input.ReadInt64();
            break;
          }
          case 48: {
            ExpireCounter = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeLogical = input.ReadInt64();
            break;
          }
          case 64: {
            TimeCounter = input.ReadUInt32();
            break;
          }
          case 72: {
            Consistency = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Resource = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 32: {
            FencingToken = input.ReadInt64();
            break;
          }
          case 40: {
            ExpireLogical = input.ReadInt64();
            break;
          }
          case 48: {
            ExpireCounter = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeLogical = input.ReadInt64();
            break;
          }
          case 64: {
            TimeCounter = input.ReadUInt32();
            break;
          }
          case 72: {
            Consistency = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
