syntax = "proto3";

service Locker {
  rpc TryLock (GrpcTryLockRequest) returns (GrpcTryLockResponse);
  rpc TryExtendLock (GrpcExtendLockRequest) returns (GrpcExtendLockResponse);
  rpc Unlock (GrpcUnlockRequest) returns (GrpcUnlockResponse);
  rpc GetLock (GrpcGetLockRequest) returns (GrpcGetLockResponse);
}

message GrpcTryLockRequest {
  string LockName = 1;
  optional string LockId = 2;
  int32 ExpiresMs = 3;
  GrpcLockConsistency Consistency = 4;
}

message GrpcTryLockResponse {
  optional string servedFrom = 1;
  GrpcLockResponseType Type = 2;
  int64 fencingToken = 3;
}

message GrpcExtendLockRequest {
  string LockName = 1;
  optional string LockId = 2;
  int32 ExpiresMs = 3;
  GrpcLockConsistency Consistency = 4;
}

message GrpcExtendLockResponse {
  optional string servedFrom = 1;
  GrpcLockResponseType Type = 2;
}

message GrpcUnlockRequest {
  string LockName = 1;
  optional string LockId = 2;
  GrpcLockConsistency Consistency = 3;
}

message GrpcUnlockResponse {
  optional string servedFrom = 1;
  GrpcLockResponseType Type = 2;
}

message GrpcGetLockRequest {
  string LockName = 1;
  GrpcLockConsistency Consistency = 2;
}

message GrpcGetLockResponse {
  optional string servedFrom = 1;
  GrpcLockResponseType Type = 2;
  string Owner = 3;
  int64 ExpiresPhysical = 4;
  uint32 ExpiresCounter = 5;
  int64 fencingToken = 6;
}

enum GrpcLockResponseType {
  LOCK_RESPONSE_TYPE_LOCKED = 0;
  LOCK_RESPONSE_TYPE_BUSY = 1;
  LOCK_RESPONSE_TYPE_EXTENDED = 2;
  LOCK_RESPONSE_TYPE_UNLOCKED = 3;
  LOCK_RESPONSE_TYPE_GOT = 4;
  LOCK_RESPONSE_TYPE_ERRORED = 99;
  LOCK_RESPONSE_TYPE_INVALID_INPUT = 100;
  LOCK_RESPONSE_TYPE_MUST_RETRY = 101;
  LOCK_RESPONSE_TYPE_LOCK_DOES_NOT_EXIST = 102;
  LOCK_RESPONSE_TYPE_INVALID_OWNER = 103;
}

enum GrpcLockConsistency {
  LOCK_CONSISTENCY_EPHEMERAL = 0;
  LOCK_CONSISTENCY_CONSISTENT = 1;
  LOCK_CONSISTENCY_REPLICATION_CONSISTENT = 2;
}